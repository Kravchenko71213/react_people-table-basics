{"version":3,"sources":["api.ts","components/Loader/Loader.tsx","components/PersonNavlink/PersonNavLink.tsx","components/PersonItem/PersonItem.tsx","components/PeopleTable/PeopleTable.tsx","components/utils/preparedPeople.tsx","components/pages/PeoplePage/PeoplePage.tsx","components/PageNavLink/PageNavLink.tsx","components/Navbar/Navbar.tsx","components/NotFoundPage/NotFoundPage.tsx","components/HomePage/HomePage.tsx","App.tsx","index.tsx"],"names":["API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","className","PersonNavLink","person","isWomen","sex","to","slug","classNames","name","PersonItem","motherName","fatherName","mother","father","useParams","isSelectedPerson","personMotherName","personFatherName","born","died","PeopleTable","people","map","preparePeople","find","mom","dad","PeoplePage","useState","setPeople","isError","setIsError","isLoading","setIsLoading","getPeopleFromServer","peopleFromServer","useEffect","length","PageNavLink","text","isActive","Navbar","role","NotFoundPage","HomePage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.f739057a.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonNavLink: FC<Props> = ({ person }) => {\n  const isWomen = person.sex === 'f';\n\n  return (\n    <NavLink\n      to={`/people/${person.slug}`}\n      className={() => (\n        classNames({ 'has-text-danger': isWomen })\n      )}\n    >\n      {person.name}\n    </NavLink>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonNavLink } from '../PersonNavlink';\n\ntype Props = {\n  person: Person,\n  motherName: string | null,\n  fatherName: string | null,\n  mother: Person | undefined,\n  father: Person | undefined,\n};\n\nexport const PersonItem: FC<Props> = ({\n  person,\n  motherName,\n  fatherName,\n  mother,\n  father,\n}) => {\n  const { slug = '' } = useParams();\n  const isSelectedPerson = person.slug === slug;\n  const personMotherName = motherName || '-';\n  const personFatherName = fatherName || '-';\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({ 'has-background-warning': isSelectedPerson })}\n    >\n      <td>\n        <PersonNavLink person={person} />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {mother\n          ? (\n            <PersonNavLink person={mother} />\n          ) : (\n            personMotherName\n          )}\n      </td>\n      <td>\n        {father\n          ? (\n            <PersonNavLink person={father} />\n          ) : (\n            personFatherName\n          )}\n      </td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { Person } from '../../types';\nimport { PersonItem } from '../PersonItem';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: FC<Props> = ({ people }) => (\n  <table\n    data-cy=\"peopleTable\"\n    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n  >\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Sex</th>\n        <th>Born</th>\n        <th>Died</th>\n        <th>Mother</th>\n        <th>Father</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {people.map(person => (\n        <PersonItem\n          person={person}\n          key={person.slug}\n          mother={person.mother}\n          father={person.father}\n          motherName={person.motherName}\n          fatherName={person.fatherName}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { Person } from '../../types';\n\nexport const preparePeople = (people: Person[]) => {\n  return people.map(person => {\n    const mother = people.find(mom => mom.name === person.motherName);\n    const father = people.find(dad => dad.name === person.fatherName);\n\n    return {\n      ...person,\n      mother,\n      father,\n    };\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPeople } from '../../../api';\nimport { Person } from '../../../types';\nimport { Loader } from '../../Loader';\nimport { PeopleTable } from '../../PeopleTable';\nimport { preparePeople } from '../../utils/preparedPeople';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getPeopleFromServer = async () => {\n    try {\n      let peopleFromServer = await getPeople();\n\n      peopleFromServer = preparePeople(peopleFromServer);\n\n      setIsLoading(false);\n      setPeople(peopleFromServer);\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    getPeopleFromServer();\n  }, []);\n\n  const isPeopleExist = () => {\n    return people.length === 0 && !isLoading;\n  };\n\n  if (isError) {\n    return (\n      <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n        Something went wrong\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"block\">\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"box table-container\">\n        {isLoading && <Loader />}\n\n        {!!people.length && (\n          <PeopleTable\n            people={people}\n          />\n        )}\n\n        {isPeopleExist() && (\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string,\n  text: string,\n};\n\nexport const PageNavLink: FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => (\n      classNames('navbar-item', { 'has-background-grey-lighter': isActive })\n    )}\n  >\n    {text}\n  </NavLink>\n);\n","import React from 'react';\nimport { PageNavLink } from '../PageNavLink';\n\nexport const Navbar: React.FC = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n        <PageNavLink to=\"people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/pages/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { HomePage } from './components/HomePage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n\n        <Routes>\n          <Route path=\"*\" element={<NotFoundPage />} />\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}